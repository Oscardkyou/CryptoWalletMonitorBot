import logging
from aiogram import Bot
from datetime import datetime
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

async def send_transaction_notification(bot: Bot, user_id: int, transaction, wallet):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Ö–æ–¥—è—â–∞—è –∏–ª–∏ –∏—Å—Ö–æ–¥—è—â–∞—è)
        tx_type = "–≤—Ö–æ–¥—è—â–∞—è" if wallet.address.lower() == transaction.to_address.lower() else "–∏—Å—Ö–æ–¥—è—â–∞—è"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–æ–∫—á–µ–π–Ω–∞
        currency = {
            "ETH": "ETH",
            "BTC": "BTC",
            "BNB": "BNB"
        }.get(wallet.blockchain_type.value, "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        amount = f"{transaction.value:.8f}".rstrip('0').rstrip('.') if transaction.value else "0"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        timestamp = transaction.timestamp.strftime("%d.%m.%Y %H:%M:%S UTC") if transaction.timestamp else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        from_addr_short = f"{transaction.from_address[:8]}...{transaction.from_address[-6:]}" if transaction.from_address else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        to_addr_short = f"{transaction.to_address[:8]}...{transaction.to_address[-6:]}" if transaction.to_address else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_text = (
            f"üîî <b>–ù–æ–≤–∞—è {tx_type} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!</b>\n\n"
            f"<b>–ö–æ—à–µ–ª—ë–∫:</b> {wallet.label or '–ë–µ–∑ –º–µ—Ç–∫–∏'} ({wallet.blockchain_type.value})\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {wallet.address[:8]}...{wallet.address[-6:]}\n\n"
            f"<b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            f"<b>–û—Ç:</b> {from_addr_short}\n"
            f"<b>–ö–æ–º—É:</b> {to_addr_short}\n"
            f"<b>–í—Ä–µ–º—è:</b> {timestamp}\n\n"
            f"<b>–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction.hash[:10]}...{transaction.hash[-8:]}"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ –±–ª–æ–∫—á–µ–π–Ω–∞
        explorer_url = None
        if wallet.blockchain_type.value == "ETH":
            explorer_url = f"https://etherscan.io/tx/{transaction.hash}"
        elif wallet.blockchain_type.value == "BTC":
            explorer_url = f"https://www.blockchain.com/btc/tx/{transaction.hash}"
        elif wallet.blockchain_type.value == "BNB":
            explorer_url = f"https://bscscan.com/tx/{transaction.hash}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å URL
        if explorer_url:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", url=explorer_url))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await bot.send_message(user_id, message_text, parse_mode="HTML", reply_markup=keyboard)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            await bot.send_message(user_id, message_text, parse_mode="HTML")
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def format_transaction_notification(wallet, transaction) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    :param wallet: –û–±—ä–µ–∫—Ç –∫–æ—à–µ–ª—å–∫–∞
    :param transaction: –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—Ö–æ–¥—è—â–∞—è –∏–ª–∏ –∏—Å—Ö–æ–¥—è—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    is_incoming = wallet.address.lower() != transaction.get("from", "").lower()
    tx_type = "‚¨ÖÔ∏è –í—Ö–æ–¥—è—â–∞—è" if is_incoming else "‚û°Ô∏è –ò—Å—Ö–æ–¥—è—â–∞—è"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
    value = transaction.get("value", 0)
    formatted_value = f"{value:.8f}".rstrip('0').rstrip('.')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
    currency = wallet.blockchain_type.value
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    timestamp = transaction.get("timestamp")
    formatted_time = timestamp.strftime("%d.%m.%Y %H:%M:%S") if timestamp else datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üîî <b>–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è</b> üîî\n\n"
        f"<b>–ö–æ—à–µ–ª–µ–∫:</b> {wallet.label or '–ë–µ–∑ –º–µ—Ç–∫–∏'} ({wallet.blockchain_type.value})\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> {wallet.address[:8]}...{wallet.address[-6:]}\n\n"
        f"<b>–¢–∏–ø:</b> {tx_type}\n"
        f"<b>–°—É–º–º–∞:</b> {formatted_value} {currency}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫–æ–≥–æ/–∫–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if is_incoming:
        from_addr = transaction.get("from", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        from_addr_short = f"{from_addr[:8]}...{from_addr[-6:]}" if from_addr != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message += f"<b>–û—Ç:</b> {from_addr_short}\n"
    else:
        to_addr = transaction.get("to", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        to_addr_short = f"{to_addr[:8]}...{to_addr[-6:]}" if to_addr != "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        message += f"<b>–ö–æ–º—É:</b> {to_addr_short}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ö–µ—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    message += (
        f"<b>–í—Ä–µ–º—è:</b> {formatted_time}\n"
        f"<b>–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> <code>{transaction.get('hash', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</code>\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª—å –±–ª–æ–∫—á–µ–π–Ω–∞
    explorer_url = None
    
    if wallet.blockchain_type.value == "ETH":
        explorer_url = f"https://etherscan.io/tx/{transaction.get('hash')}"
    elif wallet.blockchain_type.value == "BTC":
        explorer_url = f"https://www.blockchain.com/btc/tx/{transaction.get('hash')}"
    elif wallet.blockchain_type.value == "BNB":
        explorer_url = f"https://bscscan.com/tx/{transaction.get('hash')}"
    
    if explorer_url:
        message += f"\n<a href='{explorer_url}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ</a>"
    
    return message

async def send_balance_notification(bot, user_id: int, wallet, balance: float) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ –∫–æ—à–µ–ª—å–∫–∞
    
    :param bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param wallet: –û–±—ä–µ–∫—Ç –∫–æ—à–µ–ª—å–∫–∞
    :param balance: –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞
        formatted_balance = f"{balance:.8f}".rstrip('0').rstrip('.')
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
            f"<b>–ö–æ—à–µ–ª–µ–∫:</b> {wallet.label or '–ë–µ–∑ –º–µ—Ç–∫–∏'} ({wallet.blockchain_type.value})\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {wallet.address[:8]}...{wallet.address[-6:]}\n\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> {formatted_balance} {wallet.blockchain_type.value}\n"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –≤ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ –±–ª–æ–∫—á–µ–π–Ω–∞
        explorer_url = None
        if wallet.blockchain_type.value == "ETH":
            explorer_url = f"https://etherscan.io/address/{wallet.address}"
        elif wallet.blockchain_type.value == "BTC":
            explorer_url = f"https://www.blockchain.com/btc/address/{wallet.address}"
        elif wallet.blockchain_type.value == "BNB":
            explorer_url = f"https://bscscan.com/address/{wallet.address}"
        
        if explorer_url:
            message += f"\n<a href='{explorer_url}'>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –æ–±–æ–∑—Ä–µ–≤–∞—Ç–µ–ª–µ</a>"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            user_id,
            message,
            parse_mode="HTML"
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet.address} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ: {e}") 